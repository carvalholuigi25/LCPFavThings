@page "/tvseries/edit/{TVSerieId:int}"

@using LCPFavThings.Data.SQL
@using LCPFavThings.Data.SQLite

@inject NavigationManager navman

<h3>
    <span class="bi bi-tv me-2"></span>
    @localizer["lnktvseries"]
</h3>

<form class="frmedittvseries mt-3">
    <div class="row">
        <div class="col-12">
            <input type="hidden" class="hidden" readonly @bind="@tvseries.TVSerieId" />
            <div class="form-group">
                <label for="title" class="control-label">Title</label>
                <input type="text" class="form-control" @bind="@tvseries.Title" />
            </div>
            <div class="form-group mt-3">
                <label for="desc" class="control-label">Description</label>
                <textarea class="form-control" cols="1" rows="10" @bind="@tvseries.DescT"></textarea>
            </div>
            <div class="form-group mt-3">
                <label for="genre" class="control-label">Genre</label>
                <input type="text" class="form-control" @bind="@tvseries.Genre" />
            </div>
            <div class="form-group mt-3">
                <label for="category" class="control-label">Category</label>
                <input type="text" class="form-control" @bind="@tvseries.Category" />
            </div>
            <div class="form-group mt-3">
                <label for="cover" class="control-label">Cover</label>
                <input type="text" class="form-control" @bind="@tvseries.Cover" />
            </div>
            <div class="form-group mt-3">
                <label for="company" class="control-label">Company</label>
                <input type="text" class="form-control" @bind="@tvseries.Company" />
            </div>
            <div class="form-group mt-3">
                <label for="language" class="control-label">Language</label>
                <input type="text" class="form-control" @bind="@tvseries.LangT" />
            </div>
            <div class="form-group mt-3">
                <label for="totalSeasons" class="control-label">Total Seasons</label>
                <input type="number" step="1" class="form-control" @bind="@tvseries.TotalSeasons" />
            </div>
            <div class="form-group mt-3">
                <label for="duration" class="control-label">Duration</label>
                <input type="number" step="1" class="form-control" @bind="@tvseries.Duration" />
            </div>
            <div class="form-group mt-3">
                <label for="rating" class="control-label">Rating</label>
                <input type="number" step="0.01" class="form-control" @bind="@tvseries.Rating" />
            </div>
        </div>
    </div>
    <div class="row">
        <div class="form-group">
            <input type="button" class="btn btn-primary" @onclick="@UpdateTVSeries" value="Update" />
            <input type="button" class="btn btn-secondary" @onclick="@Back" value="Cancel" />
        </div>
    </div>
</form>

@code {
    [Parameter]
    public int TVSerieId { get; set; }

    [Inject] public IJSRuntime JS { get; set; }
    [Inject] public IStringLocalizer<srf.Resource> localizer { get; set; }
    [Inject] public ILocalDBDataService lcdb { get; set; }
    [Inject] public IAllDataService allcdb { get; set; }
    [Inject] public ILSHelper LSH { get; set; }

    private HubConnection hubConnection;
    public string valdbm { get; set; }

    LCPFavThings.Models.TVSeries tvseries = new LCPFavThings.Models.TVSeries();
    List<LCPFavThings.Models.TVSeries> tvserieslist = new List<LCPFavThings.Models.TVSeries>();

    protected override async Task OnInitializedAsync()
    {
        valdbm = !string.IsNullOrEmpty(await LSH.Get("dbmode")) ? await LSH.Get("dbmode") : "server";
        await MyExtensions.LoadMyCultureInfo(JS);

        try 
        {
            if (valdbm == "server_realtime")
            {
                tvserieslist = await allcdb.ReadById<LCPFavThings.Models.TVSeries>("tvseries", x => x.TVSerieId == TVSerieId);

                hubConnection = new HubConnectionBuilder()
                .WithUrl(navman.ToAbsoluteUri(HTTPHelper.GetMyBaseAddress() + "/broadcastHub"))
                .Build();

                await hubConnection.StartAsync();
            }
            else if (valdbm == "server")
            {
                tvserieslist = await allcdb.ReadById<LCPFavThings.Models.TVSeries>("tvseries", x => x.TVSerieId == TVSerieId);
            }
            else
            {
                tvserieslist = await lcdb.ReadById<LCPFavThings.Models.TVSeries>(x => x.TVSerieId == TVSerieId);
            }

            tvseries = (LCPFavThings.Models.TVSeries)tvserieslist.FirstOrDefault();
        }
        catch (Exception e)
        {
            await JS.InvokeVoidAsync("alert", $"Message: {e.Message} \r\n URL: {HTTPHelper.GetMyBaseAddress()} \r\n DB Mode Type: {valdbm}");
        }

        StateHasChanged();
    }

    protected async Task UpdateTVSeries()
    {
        if (valdbm == "server_realtime")
        {
            await allcdb.Update<LCPFavThings.Models.TVSeries>("tvseries", TVSerieId, tvseries);
            if (IsConnected) await SendMessage();
        }
        else if (valdbm == "server")
        {
            await allcdb.Update<LCPFavThings.Models.TVSeries>("tvseries", TVSerieId, tvseries);
        }
        else
        {
            await lcdb.Update<LCPFavThings.Models.TVSeries>(tvseries);
        }

        navman.NavigateTo("tvseries");
    }

    Task SendMessage() => hubConnection.SendAsync("SendMessage");

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }

    private void Back()
    {
        navman.NavigateTo("/tvseries");
        StateHasChanged();
    }
}
