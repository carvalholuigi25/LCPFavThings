@page "/login"

@using LCPFavThings.Data.SQL
@using LCPFavThings.Data.SQLite
@using LCPFavThings.Helpers
@using Newtonsoft.Json

<h3>
    <span class="bi bi-door-open ms-1"></span>
    @localizer["lnklogin"]
</h3>

<Microsoft.AspNetCore.Components.Forms.EditForm Model="@users" OnValidSubmit="DoLogin">
    <Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator />
    <Microsoft.AspNetCore.Components.Forms.ValidationSummary />

    <div class="form-group mt-3">
        <label for="username">Username</label>
        <InputText type="text" class="username form-control" id="username" @bind-Value="users.Username" />
    </div>

    <div class="form-group mt-3">
        <label for="passwordt">Password</label>
        <InputText type="password" class="passwordt form-control" id="passwordt" @bind-Value="users.Password" />
    </div>

    <div class="form-group mt-3 d-inline-block ms-auto me-auto">
        <button type="submit" class="btn btn-primary btnlogin" id="btnlogin">Enter</button>
        <button type="button" class="btn btn-secondary btnresetlogin ms-1" id="btnresetlogin" @onclick="Clear">Clear</button>
    </div>
</Microsoft.AspNetCore.Components.Forms.EditForm>

<div class="d-block mt-3 ms-auto me-auto text-center infogroup">
    <i class="bi bi-info-circle" style="font-size: 3rem"></i>
    <p class="mt-3">New here or you dont have account here? Please <a href="/register" target="_self">create your account</a></p>
</div>

@code {
    [Inject] public IJSRuntime JS { get; set; }
    [Inject] public IStringLocalizer<srf.Resource> localizer { get; set; }
    [Inject] public ILSHelper ls { get; set; }
    [Inject] public IAllDataService alldatasrv { get; set; }
    [Inject] public ILocalDBDataService locdbdatasrv { get; set; }
    [Inject] public NavigationManager navman { get; set; }

    private string valdbm { get; set; } = "server";

    lib.Models.UserAuth users = new lib.Models.UserAuth();
    List<lib.Models.UserAuth> userslist = new List<lib.Models.UserAuth>();

    protected override async Task OnInitializedAsync()
    {
        await MyExtensions.LoadMyCultureInfo(JS);

        valdbm = !string.IsNullOrEmpty(await ls.Get("dbmode")) ? await ls.Get("dbmode") : "server";

        StateHasChanged();
    }

    private async Task DoLogin()
    {
        if(users != null)
        {
            List<lib.Models.UserAuth> userslistv = new List<lib.Models.UserAuth>();

            if (valdbm == "local")
            {
                userslistv = await locdbdatasrv.CreateAndGet<lib.Models.UserAuth>(users);
            }
            else
            {
                userslistv = await alldatasrv.InsertAndGet<lib.Models.UserAuth>("auth", users);
            }

            if (userslistv != null)
            {
                await ls.Save("authinfo", JsonConvert.SerializeObject(
                    new lib.Models.UserAuth()
                    {
                        Username = users.Username,
                        TokenInfo = new lib.Models.Token()
                        {
                            TokenId = userslistv[0].TokenInfo.TokenId,
                            Authenticated = userslistv[0].TokenInfo.Authenticated,
                            AccessToken = userslistv[0].TokenInfo.AccessToken,
                            Created = userslistv[0].TokenInfo.Created,
                            Expiration = userslistv[0].TokenInfo.Expiration,
                            Message = userslistv[0].TokenInfo.Message
                        }
                    }
                ));

                if (!string.IsNullOrEmpty(await ls.Get("authinfo")))
                {
                    await JS.InvokeVoidAsync("alert", $"Succesfully logged as {users.Username}!");
                    navman.NavigateTo("/", true);
                }
            }
            else
            {
                if (!string.IsNullOrEmpty(await ls.Get("authinfo")))
                {
                    await ls.Delete("authinfo");
                }

                await JS.InvokeVoidAsync("alert", $@"
                Error: Occurred error when trying to log with this account {users.Username}.
                {Environment.NewLine}
                Reasons:
                {Environment.NewLine}
                The account does not exist.
                {Environment.NewLine}
                The account has already been registered by someone else.");
            }
        }
        else
        {
            await JS.InvokeVoidAsync("alert", @"Error: Please write your credientals of actual user into fields. Thank you!");
        }
    }

    private void Clear()
    {
        users = new lib.Models.UserAuth();
    }
}
