@if (mydata.Count() == 0)
{
	<p>No tv series data!</p>
}
else
{
	<div class="table-responsive">
		<table class="table table-bordered">
			<thead>
				<tr>
					<th>Id</th>
					<th>Title</th>
					<th>Desc</th>
					<th>Cover</th>
					<th>Category</th>
					<th>Company</th>
					<th>Duration</th>
					<th>Genre</th>
					<th>Language</th>
					<th>Total Seasons</th>
					<th>Rating</th>
					<th></th>
				</tr>
			</thead>
			<tbody>
				@foreach (var mdata in mydata)
				{
					<tr>
						<td>@mdata.TVSerieId</td>
						<td>@mdata.Title</td>
						<td>@mdata.DescT</td>
						<td>@mdata.Cover</td>
						<td>@mdata.Category</td>
						<td>@mdata.Company</td>
						<td>@mdata.Duration</td>
						<td>@mdata.Genre</td>
						<td>@mdata.LangT</td>
						<td>@mdata.TotalSeasons</td>
						<td>@mdata.Rating</td>
						<td>
							<a href="/tvseries/edit/@mdata.TVSerieId" class="btn btn-primary" title="Edit">
								<i class="bi bi-pencil"></i>
								Edit
							</a>
							<a href="/tvseries/delete/@mdata.TVSerieId" class="btn btn-danger" title="Delete">
								<i class="bi bi-trash"></i>
								Delete
							</a>
						</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
}


@code {
	[Parameter]
	public List<lib.Models.TVSeries> mydata { get; set; }

	[Parameter]
	public int? mydataid { get; set; }

	protected override Task OnInitializedAsync()
	{
		if (mydataid != null)
		{
			mydata = mydata.Where(x => x.TVSerieId == mydataid).ToList();
		}

		return base.OnInitializedAsync();
	}
}
